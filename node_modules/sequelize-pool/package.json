{
  "_args": [
    [
      {
        "raw": "sequelize-pool@^6.0.0",
        "scope": null,
        "escapedName": "sequelize-pool",
        "name": "sequelize-pool",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "D:\\coding_blocks\\shopping_cart\\node_modules\\sequelize"
    ]
  ],
  "_from": "sequelize-pool@^6.0.0",
  "_hasShrinkwrap": false,
  "_id": "sequelize-pool@6.1.0",
  "_location": "/sequelize-pool",
  "_nodeVersion": "12.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sequelize-pool_6.1.0_1594476958213_0.6082404646301751"
  },
  "_npmUser": {
    "name": "sushantdhiman",
    "email": "sushantdhiman@outlook.com"
  },
  "_npmVersion": "6.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sequelize-pool@^6.0.0",
    "scope": null,
    "escapedName": "sequelize-pool",
    "name": "sequelize-pool",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sequelize"
  ],
  "_resolved": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-6.1.0.tgz",
  "_shasum": "caaa0c1e324d3c2c3a399fed2c7998970925d668",
  "_shrinkwrap": null,
  "_spec": "sequelize-pool@^6.0.0",
  "_where": "D:\\coding_blocks\\shopping_cart\\node_modules\\sequelize",
  "author": {
    "name": "Sushant",
    "email": "sushantdhiman@outlook.com"
  },
  "bugs": {
    "url": "https://github.com/sushantdhiman/sequelize-pool/issues"
  },
  "dependencies": {},
  "description": "Resource pooling for Node.JS",
  "devDependencies": {
    "@types/node": "^14.0.1",
    "@typescript-eslint/eslint-plugin": "^3.0.0",
    "@typescript-eslint/parser": "^3.0.0",
    "eslint": "^7.0.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-prettier": "^3.1.2",
    "prettier": "^2.0.2",
    "tap": "^14.10.7",
    "typedoc": "^0.17.7",
    "typedoc-plugin-markdown": "^2.2.17",
    "typescript": "^3.9.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-4YwEw3ZgK/tY/so+GfnSgXkdwIJJ1I32uZJztIEgZeAO6HMgj64OzySbWLgxj+tXhZCJnzRfkY9gINw8Ft8ZMg==",
    "shasum": "caaa0c1e324d3c2c3a399fed2c7998970925d668",
    "tarball": "https://registry.npmjs.org/sequelize-pool/-/sequelize-pool-6.1.0.tgz",
    "fileCount": 19,
    "unpackedSize": 37675,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfCcmeCRA9TVsSAnZWagAAMcsQAJmT5I6d1zlHDNloJ8wN\nrW5e+Zfpj7AL+eQ7vA5VUhgA0ALZ6tUvQOT4ix8xdJqI1x3Ik4+Azt81v2PB\nyxtdIlTaSIMlyVSo+Wn8vMDRcDtvj+5gzTQMJxSUxmtN1kBzoaJoseKMCUbD\n0rskWOc/8mLHeur4XCffhgp9a64cPwDmxmieCwe283pSsz/kTqZysLRL9NMS\nQA7GUaKpDg++Y3BI9Q8dYoyA31Y8YdA0AVn1MpRxHG9WqQfTo5jDIIbT1SZJ\nPPeXAA/O9CqvIz5mKcKwA5w+gs23EJU+myVPzQOUfDjJUTiAJknQPwwb3W2Y\nAVVksIQiF7TVTGSgqsLKrN2NI2WJnFcRLgeGTwFUgW1GQyqcLIjl8udLFCvk\n5AV6DrLf3X0yUXs5W3yTwvKgWkJjbqgLv0rGKXy0E0ObbuL1z179gJZu+ASd\nc6Sn9aNt5N7mW/4uQaE57nuDi3XqSJ9l19sjdjKobaTCsuKzS7eIqEtk+NQ4\nRQTJpmBI2TTBXl2j3ciTo/c34JrwGdLlnFhXXCPr2viZT1eM9CE7GgwPUd68\nI5Kr/ae0XJj06x7ECJU6NZSV3LwQ8Hb2bSSDJvszFYkeNPRSINm9uAhKbWh3\nhqp6m92DYileOdSJLzTztagKEoD2kHjizno/SHQnKplP0+m8qxeTZsIk3+sv\nlPSJ\r\n=pDS5\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.0.0"
  },
  "files": [
    "lib",
    "types"
  ],
  "gitHead": "7602d95bf633e6f774289cf66db468f35d2f8218",
  "homepage": "https://github.com/sushantdhiman/sequelize-pool#readme",
  "keywords": [
    "pool",
    "pooling",
    "throttle",
    "sequelize"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sushantdhiman",
      "email": "sushantdhiman@outlook.com"
    }
  ],
  "name": "sequelize-pool",
  "optionalDependencies": {},
  "prettier": {
    "singleQuote": true
  },
  "readme": "# Sequelize Pool\n\n[![npm](https://img.shields.io/npm/v/sequelize-pool.svg?style=flat-square)](https://www.npmjs.com/package/sequelize-pool)\n[![Actions Status](https://github.com/sequelize/sequelize-pool/workflows/CI/badge.svg)](https://github.com/sequelize/sequelize-pool/actions)\n\nResource pool implementation. It can be used to throttle expensive resources.\n\n**Note:**\nThis is a fork from [generic-pool@v2.5](https://github.com/coopernurse/node-pool/tree/v2.5).\n\n## Installation\n\n```sh\nnpm i sequelize-pool\n```\n\n## API Documentation\n\nYou can find full API documentation in [docs/README.md](docs/README.md)\n\n## Example\n\n### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool\nvar Pool = require('sequelize-pool').Pool;\nvar mysql2 = require('mysql2/promise');\n\nvar pool = new Pool({\n  name: 'mysql',\n  create: async () => {\n    // create a new connection\n    // return as a promise\n    return mysql2.createConnection({\n      user: 'scott',\n      password: 'tiger',\n      database: 'mydb',\n    });\n  },\n  destroy: (connection) => {\n    // this function should destroy connection. Pool waits for promise (if returned).\n    // connection is removed from pool and this method is called and awaited for.\n    connection.end();\n  },\n  validate: (connection) => connection.closed !== true,\n  max: 5,\n  min: 0,\n});\n```\n\n### Step 2 - Use pool in your code to acquire/release resources\n\n```js\n// acquire connection\n(async () => {\n  // Get new connection from pool.\n  // This method can throw TimeoutError if connection was not created in\n  // specified `factory.acquireTimeoutMillis` time.\n  const connection = await pool.acquire();\n\n  const result = connection.query('select * from foo');\n\n  // return connection back to pool so it can be reused\n  pool.release(connection);\n})();\n```\n\n### Step 3 - Drain pool during shutdown (optional)\n\nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so. This is a side\neffect of the `idleTimeoutMillis` behaviour -- the pool has a\n`setTimeout()` call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.\n\nThis behavior will be more problematic when you set `factory.min > 0`,\nas the pool will never become empty, and the `setTimeout` calls will\nnever end.\n\nIn these cases, use the `pool.drain()` function. This sets the pool\ninto a \"draining\" state which will gracefully wait until all\nidle resources have timed out. For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain().then(() => pool.destroyAllNow());\n```\n\nIf you do this, your node process will exit gracefully.\n\n## Draining\n\nIf you know would like to terminate all the resources in your pool before\ntheir timeouts have been reached, you can use `destroyAllNow()` in conjunction\nwith `drain()`:\n\n```js\npool.drain().then(() => pool.destroyAllNow());\n```\n\nOne side-effect of calling `drain()` is that subsequent calls to `acquire()`\nwill throw an Error.\n\n## Using `maxUses` option\n\nImagine a scenario where you have 10 app servers (hosting an API) that each connect to a read-replica set of 3 members, accessible behind a DNS name that round-robins IPs for the 3 replicas. Each app server rus a connection pool of 25 connections.\n\nYou start your app servers with an ambient traffic load of 50 http requests per second, and the connection pools likely fill up in a minute or two. Everything is great at this point.\n\nBut when you hit weekly traffic peaks, you might reach up to 1,000 http requests per second. If you have a DB with elastic read replicas, you might quickly add 10 more read replicas during this peak time and scale them back down during slower times of the week in order to reduce cost and avoid the additional replication lag you might see with larger numbers or read replicas.\n\nWhen you add these 10 read replicas, assuming the first 3 remain healthy, the connection pool with not inherently adopt these new replicas because the pools are full and the connections are healthy, so connections are continuously reused with no need to create new ones. Some level of intervention is needed to fill the connection pool with connections that are balanced between all the replicas.\n\nIf you set the `maxUses` configuration option, the pool will proactively retire a resource (connection) once it has been acquired and released `maxUses` number of times, which over a period of time will eventually lead to a relatively balanced pool.\n\nOne way to calculate a reasonable value for `maxUses` is to identify an acceptable window for rebalancing and then solve for `maxUses`:\n\n```sh\n   maxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n```\n\nIn the example above, assuming we acquire and release 1 connection per request and we are aiming for a 30 minute rebalancing window:\n\n```sh\n    maxUses = rebalanceWindowSeconds * totalRequestsPerSecond / numAppInstances / poolSize\n       7200 =        1800            *          1000          /        10       /    25\n```\n\n...in other words we would retire and replace a connection after every 7200 uses, which we expect to be around 30 minutes under peak load.\n\nOf course, you'll want to test scenarios for your own application since every app and every traffic pattern is different.\n\n## Contributing\n\nWe use [Node Tap](https://node-tap.org/) for testing.\n\n```sh\nnpm install\nnpm test\n```\n\nDocumentation is generated with `typedoc`\n\n```sh\nnpm run docs\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/sushantdhiman/sequelize-pool.git"
  },
  "scripts": {
    "build": "tsc",
    "docs": "typedoc",
    "lint": "eslint --ext .js,.ts src/**/* test/**/*",
    "pretty": "prettier src/**/*.ts test/**/*.js --write",
    "test": "npm run lint && npm run test:raw",
    "test:raw": "tap test/**/*-test.js"
  },
  "types": "types",
  "version": "6.1.0"
}
